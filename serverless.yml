service: serverless-rest-api-with-dynamodb

frameworkVersion: ">=2.24.0"

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - api
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Comment if you don't have a DynamoDB running locally
    #  noStart: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs12.x
  stage: 'api'
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: messages/create.create
    events:
      - http:
          path: messages
          method: post
          cors: true

  list:
    handler: messages/list.list
    events:
      - http:
          path: messages
          method: get
          cors: true

  get:
    handler: messages/get.get
    events:
      - http:
          path: messages/{id}
          method: get
          cors: true

  update:
    handler: messages/update.update
    events:
      - http:
          path: messages/{id}
          method: put
          cors: true

resources:
  Resources:
    MessagesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
